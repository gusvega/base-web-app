{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6OAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,gCC/ElDC,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCYLK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OADAd,QAAQC,IAAI,YAER,6BACIa,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCG1BW,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAE7B,OADArB,QAAQC,IAAI,eAER,yBAAKS,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,MCAXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCkBJC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACD5B,MAAQ,CACTmC,UAAU,GAHA,E,8DAOA5B,EAAO6B,GACrBC,KAAKC,SAAS,CAACH,UAAS,M,+BAIxB,OAAGE,KAAKrC,MAAMmC,SACH,wCAEAE,KAAKT,MAAMK,a,GAhBFM,aCkCbC,E,kDAhCX,aAAc,IAAD,8BACT,gBAcJC,YAAc,WACV,EAAKH,UAAS,SAAAtC,GACV,MAAO,CAAC0C,MAAO,EAAK1C,MAAM0C,MAAQ,OAftC,EAAK1C,MAAQ,CACT0C,MAAO,GAHF,E,kEAOSC,EAAWC,GAC7B,OAAGP,KAAKrC,MAAM0C,QAAUC,EAAUD,Q,+BAgBlC,OADAxC,QAAQC,IAAI,UAER,4BAAQ0C,MAAOR,KAAKT,MAAMiB,MAAOC,QAAST,KAAKI,aAA/C,UACYJ,KAAKrC,MAAM0C,W,GA5BPH,aCebQ,E,uKAVP,OADA7C,QAAQC,IAAI,UAER,6BACI,wBAAIS,UAAU,MAAd,SACA,kBAAC,EAAD,CAAeiC,MAAO,a,GAPjBN,aCyBfS,E,kLAEFX,KAAKT,MAAMqB,oB,+BAGH,IAAD,EACoDZ,KAAKT,MAAxDZ,EADD,EACCA,OAAQkC,EADT,EACSA,YAAaC,EADtB,EACsBA,eAAgBC,EADtC,EACsCA,UACvCC,EAAiBrC,EAAOsC,QAAO,SAAAC,GACnC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASP,EAAYM,kBAEvD,OACE,yBAAK5C,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,aAAc4B,IACzB,kBAAC,EAAD,KACIC,EAAY,0CACZ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpC,OAAQqC,W,GAjBdd,aA2BHmB,eA5CS,SAAC1D,GACvB,MAAO,CACLkD,YAAalD,EAAM2D,aAAaT,YAChClC,OAAQhB,EAAM4D,cAAc5C,OAC5BoC,UAAWpD,EAAM4D,cAAcR,cAMR,SAACS,GAC1B,MAAO,CACLV,eAAgB,SAACW,GAAD,OAAWD,EChBU,CACrCrC,KCR+B,sBDS/BuC,QDcmDD,EAAME,OAAOC,SAChEhB,gBAAiB,kBAAMY,GCZQ,SAACA,GAChCA,EAAS,CAACrC,KCXwB,2BDYlC0C,MAAM,8CACDxE,MAAM,SAAAyE,GAAQ,OAAIA,EAASC,UAC3B1E,MAAK,SAAA2E,GAAI,OAAIR,EAAS,CAACrC,KCbM,yBDauBuC,QAASM,OAC7D/D,OAAM,SAAAC,GAAK,OAAIsD,EAAS,CAACrC,KCbG,wBDa0BuC,QAASxD,cDsCzDmD,CAA6CV,GGhDtDsB,EAAqB,CACvBpB,YAAa,IAYXqB,EAAqB,CACvBnB,WAAW,EACXpC,OAAQ,GACRT,MAAO,ICTLiE,G,MAASC,0BAETC,EAAeC,YAAgB,CAACf,cDUT,WAA0C,IAAzC5D,EAAwC,uDAAlCuE,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOpD,MACV,ID1B8B,yBC2B1B,OAAOqD,OAAOC,OAAO,GAAI9E,EAAO,CAACoD,WAAW,IAChD,ID3B8B,yBC4B1B,OAAOyB,OAAOC,OAAO,GAAI9E,EAAO,CAACgB,OAAQ4D,EAAOb,QAASX,WAAW,IACxE,ID5B6B,wBC6BzB,OAAOyB,OAAOC,OAAO,GAAI9E,EAAO,CAACO,MAAOqE,EAAOb,QAASX,WAAW,IACvE,QACI,OAAOpD,ICnBkC2D,aDLzB,WAA8C,IAA7C3D,EAA4C,uDAApCsE,EAAoBM,EAAgB,uDAAP,GAC9D,OAAOA,EAAOpD,MACV,IDb2B,sBCcvB,OAAOqD,OAAOC,OAAO,GAAI9E,EAAO,CAACkD,YAAa0B,EAAOb,UACzD,QACI,OAAO/D,MCGb+E,EAAQC,YAAYN,EAAcO,YAAgBC,IAAiBV,IAGzEW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SZJnB,SAAkBhG,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgG,IAAIC,0BAAwBxG,OAAOC,SAASwG,MACpDC,SAAW1G,OAAOC,SAASyG,OAIvC,OAGF1G,OAAO2G,iBAAiB,QAAQ,WAC9B,IAAMtG,EAAK,UAAMmG,0BAAN,sBAEP1G,IAgEV,SAAiCO,EAAOC,GAEtC4E,MAAM7E,EAAO,CACXuG,QAAS,CAAE,iBAAkB,YAE5BlG,MAAK,SAAAyE,GAEJ,IAAM0B,EAAc1B,EAASyB,QAAQE,IAAI,gBAEnB,MAApB3B,EAAS4B,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzG,UAAUC,cAAcyG,MAAMvG,MAAK,SAAAC,GACjCA,EAAauG,aAAaxG,MAAK,WAC7BV,OAAOC,SAASkH,eAKpB/G,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAiG,CAAwB/G,EAAOC,GAI/BC,UAAUC,cAAcyG,MAAMvG,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OYrB/BE,K","file":"static/js/main.c6b039d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport 'tachyons';\n\n\nconst Card = ({name, email, id}) => {\n\n    return (\n        <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    console.log('CARDLIST')\n    return (\n        <div>{\n            robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                )\n\n            } \n        )}\n        </div>\n    );\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    console.log('SEARCHFIELD')\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Users'\n                onChange={searchChange}\n                />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid blacl', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>OOOPS...</h1>\n        }else{\n            return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react'\n\nclass CounterButton extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        if(this.state.count !== nextProps.count){\n            return true\n        }\n\n        return false\n    }\n\n    updateCount = () =>{\n        this.setState(state => {\n            return {count: this.state.count + 1}\n        }\n        )\n    }\n\n    render(){\n        console.log('HEADER')\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterButton","import React, { Component } from 'react'\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n\n    render(){\n        console.log('HEADER')\n        return (\n            <div>\n                <h1 className='f1'>USERS</h1>\n                <CounterButton color={'red'}></CounterButton>\n\n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <Header></Header>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading...</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\n// const store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}